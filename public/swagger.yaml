openapi: "3.0.0"
info:
  title: "WeatherAPI"
  description: "WeatherAPI"
  version: "1.0"
servers:
  - url: http://localhost:8000/api/v1
paths:
  /notebook/:
    get:
      summary: Get notebook info
      operationId: getNotebook
      tags:
        - Notebook
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: string
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#components/schemas/Notebook"

    post:
      summary: Create notebook object
      operationId: createNotebook
      tags:
        - Notebook
      requestBody:
        description: Create notebook object
        required: true
        content:
          application/json:
              schema:
               $ref: "#/components/schemas/Notebook"
      responses:
        201:
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Notebook"
        default:
          description: Errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"


  /notebook/{id}:
    get:
      summary: Get concrete notebook info
      operationId: getNotebookById
      tags:
        - Notebook
      parameters:
        - name: id
          in: path
          required: true
          description: Id of notebook
          schema:
            type: integer
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Notebook"
        default:
          description: Errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

    post:
      summary: Update concrete notebook object
      operationId: updateNotebook
      tags:
        - Notebook
      parameters:
        - name: id
          in: path
          required: true
          description: Id of notebook
          schema:
            type: integer
      requestBody:
        description: Update body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notebook"
      responses:
        200:
          description: Successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Notebook"
        default:
          description: Errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

    delete:
      summary: Delete notebook object
      operationId: deleteNotebook
      tags:
        - Notebook
      parameters:
        - name: id
          in: path
          required: true
          description: Id of notebook
          schema:
            type: integer
      responses:
        200:
          description: Deleted item
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Notebook"
components:
  schemas:
    Notebook:
      type: object
      required:
        - fio
        - company
        - phone_number
        - email
        - birthday
        - photo
      properties:
        id:
          type: integer
          description: Id generated by ORM
          example: 1
        fio:
          type: string
          description: FIO
          example: Fedorov Stepan Vladimirovich
        company:
          type: string
          description: Company
          example: Future
        phone_number:
          type: string
          description: Phone number
          example: 88805553535
        email:
          type: string
          description: email
          example: step.rus.f@gmail.com
        birthday:
          type: string
          format: YYYY-MM-DD
          example: 2002-12-27
        photo:
          type: object
          format: image
          example: 123.png

    Errors:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - 400
            - 422
            - 404
            - 500
        message:
          type: string










